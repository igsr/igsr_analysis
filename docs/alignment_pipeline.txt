
Alignment pipeline example

1 Environment variables

  You need only one path in your PERL5LIB: the location of the ReseqTrack modules

    $ export PERL5LIB=${PERL5LIB}:/path/to/ReseqTrack/modules

  It is useful to add the Hive scripts directory to your path:
    
    $export PATH=${PATH}:$ENSEMBL_CVS_ROOT_DIR/ensembl-hive/scripts

  It is also useful to add the RESEQTRACK environment variable pointing to the
  reseqtrack code.  This is used to automatically locate the split and
  validate bam executables.

    $export RESEQTRACK=/path/to/ReseqTrack


2 Databases

  The pipeline uses two databases. They may be on different servers or the
  same server.

  2.1 The ReseqTrack database

    The pipeline queries a ReseqTrack database to find run meta info and fastq
    file locations. It is assumed that fastq files are stored in a collection
    where the collection name is equal to the run_id in the run_meta_info table.

    The Alignment pipeline will not write anything to the ReseqTrack database;
    read-only access is OK.

  2.2 The Hive database

    This is database is used by the Hive code to manage the pipeline and job
    submission etc. The pipeline will be created automatically when you run
    the init_pipeline.pl script.  Write access is needed to this database.


3 Initialise the pipeline
  
  The pipeline is initialised with the hive script init_pipeline.pl. Here is
  an example of how to initialise a pipeline:

  init_pipeline.pl ReseqTrack::Hive::PipeConfig::Alignment_conf \
    -password ?????? -reference /path/to/genome.fa \
    -reseqtrack_db -dbname hipsci_track

  The first argument is the the module that defines this pipeline.  Then you
  pass in various options to configure the pipeline for your own needs.  The
  options are documented in the ReseqTrack::Hive::PipeConf::Alignment_conf
  module file. You will probably want to override the defaults for many of
  these options so take a look.

4 Sync the hive database

  This should always be done before [re]starting a pipeline:

  Run e.g.:
    beekeeper.pl -url mysql://g1krw:{password}@mysql-g1k:4175/my_hive_db_name -sync

  where -url is the details of your hive database.  Look at the output from
  init_pipeline.pl to see what your url is.

5. Run the pipeline

  Run e.g.:
    beekeeper.pl -url mysql://g1krw:{password}@mysql-g1k:4175/my_hive_db_name -loop &

  Note the '&' makes it run in the background.

  Look at the pod for beekeeper.pl to see the various options.  E.g. you might
  want to use the -hive_log_dir flag so that all output/error gets recorded in
  files.

  While the pipeline is running, you can check the 'progress' view of the hive
  database to see the current status.  If a job has failed, check the msg
  view.

