#!/usr/bin/env python

import gzip
import sys
import argparse
import pdb

parser = argparse.ArgumentParser(description='Parse output of samtools depth and aggregate cov per base and generates\
BED with intervals above threshold')

parser.add_argument('--ifile',required=True, help='File generated by SAMtools depth' )
parser.add_argument('--prefix',required=True, help='Prefix for output files' )
parser.add_argument('--threshold',required=False, help='Coverage threshold used for generating BED intervals' )

args = parser.parse_args()

gzipf=gzip.open(args.prefix+".cov.gz", 'wb')
bedfile=open(args.prefix+".bed",'w')
start=None
end=None
cpos=None
in_ival=False
cchr=None
maxpos=0

with gzip.open(args.ifile, 'rt') as f:
    for line in f:
        line=line.rstrip("\n")
        elms=line.split("\t")
        chrom=elms[0]
        pos=int(elms[1])
        if cchr!=chrom:
            cchr=chrom
            maxpos=pos
        else:
            if pos<maxpos:
                raise Exception("This is file is not position sorted. {0} is lower than {1}\n".format(pos,maxpos))
            else:
                maxpos=pos
            
        sumcov=None
        cpos=pos
        if len(elms)>3 :
            covs=[int(x) for x in elms[2:-1]]
            sumcov=sum(covs)
        else:
            #this basically means that the aggretation of coverage is already done in --ifile
            sumcov=int(elms[2])

        nline="{0}\t{1}\t{2}\n".format(chrom,pos,sumcov)
        gzipf.write(nline.encode('utf-8'))
        if args.threshold is not None and sumcov>=int(args.threshold):
            if in_ival is False:
                start=pos
                in_ival=True
            else:
                continue
        elif args.threshold is not None and sumcov<int(args.threshold):
            if in_ival is True:
                end=int(pos)-1
                bedfile.write("{0}\t{1}\t{2}\n".format(chrom,start,end))
                in_ival=False
            else:
                continue
        else:
            continue
    if in_ival is True:
        bedfile.write("{0}\t{1}\t{2}\n".format(chrom,start,pos))

gzipf.close()
