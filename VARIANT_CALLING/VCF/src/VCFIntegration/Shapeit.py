'''
Created on 21 Jul 2017

@author: ernesto
'''
import os
import pdb
import subprocess

class Shapeit(object):
    '''
    Class to run SHAPEIT
    '''

    def __init__(self, shapeit_folder=None, ligateHAPLOTYPES_folder=None):
        '''
        Constructor

        Class variables
        ---------------
        shapeit_folder : str, Optional
                         Path to folder containing the Shapeit binary
        ligateHAPLOTYPES_folder : str, Optional
                                  Path to folder containing the ligateHAPLOTYPES binary
        '''
        self.shapeit_folder = shapeit_folder
        self.ligateHAPLOTYPES_folder = ligateHAPLOTYPES_folder

    def run_shapeit(self, input_gen, input_init, input_scaffold, output_prefix, input_map=None,
                    verbose=False, **kwargs):
        '''
        Run Shapeit
        
        Parameters
        ----------
        input_gen : str, Required
                    specifies the genotype/GL input data that you obtain from Beagle4, i.e. 'input.shapeit.20.gen.gz input.shapeit.20.gen.sample'
        input_init : str, Required
                     specifies the haplotypes that you obtain from Beagle4, i.e. 'input.shapeit.20.hap.gz input.shapeit.20.hap.sample'
        input_scaffold : str, Required
                         SNP-array derived haplotype scaffold used by SHAPEIT. It has to be in Impute2 format. i.e. 'scaffold.haps.gz scaffold.haps.sample'
        output_prefix : str, Required
                        Prefix used for the 2 output files estimated by SHAPEIT, i.e. 'output.shapeit.20.haps.gz output.shapeit.20.haps.sample'
        input_map : str, Optional
                    Path with the genetic map
        i_from : int, Optional
               specify the region to be phased
        i_to : int, Optional
             specify the region to be phased
        verbose : bool, optional
                  if true, then print the command line used for running this program
        
        Returns
        -------
        A dict with the path to the 2 output files (*.haps.gz and *.haps.sample) that can be used with SHAPEIT
        '''        

        command = ""

        if self.shapeit_folder:
            command += self.shapeit_folder+"/"

        command += "shapeit -call --input-gen {0} --input-init {1} --input-scaffold {2} --output-max {3}.haps.gz {3}.haps.sample --output-log {3}.log".format(input_gen, input_init, input_scaffold,output_prefix)
        for k,v in kwargs.items():
            command += " --{0} {1}".format(k,v)

        if verbose==True:
            print("Command used was: %s" % command)
             
        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as exc:
            print("Command used was: {0}".format(command))
            raise Exception(exc.output)

        outdict={ 
            'hap_gz' : '{0}.haps.gz'.format(output_prefix),
            'hap_sample' : '{0}.haps.sample'.format(output_prefix)
        }

        return outdict

    def ligate_shapeitchunks(self,vcf_f,scaffolded_samples,chunk_str,output_prefix,verbose=False):
        '''
        Run ligateHAPLOTYPES to ligate together all haplotype chunks produced by SHAPEIT
        (see https://mathgen.stats.ox.ac.uk/genetics_software/shapeit/shapeit.html#haplegsample)

        Parameters
        ----------
        vcf_f : str, Required
                VCF with the Genotype likelihoods
        scaffolded_samples : str, Required
                             File with the list of samples (separated by '\n') that have been scaffolded
        chunk_str : str, Required
                    String with the paths to the different files generated by SHAPEIT for the different 
                    chromosome chunks (i.e. 's2.chunk1.hap.gz s2.chunk1.hap.gz s2.chunk1.hap.gz')
        output_prefix : str, Required
                        String with the output prefixes (i.e. 'output.shapeit.22.ligated.haps.gz output.shapeit.22.ligated.haps.sample')

        Returns
        -------
        A dict with the path to the 2 output files (*.haps.gz and *.haps.sample)
        '''
        
        command = ""

        if self.ligateHAPLOTYPES_folder:
            command += self.ligateHAPLOTYPES_folder+"/"

        command += "ligateHAPLOTYPES --vcf {0} --scaffold {1} --chunks {2} --output {3}.ligated.haps.gz {3}.ligated.haps.sample".format(vcf_f,
                                                                                                                                        scaffolded_samples, 
                                                                                                                                        chunk_str,
                                                                                                                                        output_prefix)
        if verbose==True:
            print("Command used was: %s" % command)

        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as exc:
            print("Command used was: {0}".format(command))
            raise Exception(exc.output)

        outdict={
            'hap_gz' : '{0}.haps.gz'.format(output_prefix),
            'hap_sample' : '{0}.haps.sample'.format(output_prefix)
        }

        return outdict
