'''
Created on 21 Jul 2017

@author: ernesto
'''
import os
import pdb
import subprocess

class VcfGenotype(object):
    '''
    Class to operate on a VCF file at the population level and perform
    different Genotype operations on it. For example, the estimation of
    the genotype likelihoods (with SNPTools), genotype calling (with Beagle)
    '''

    def __init__(self, vcf, reference=None, snptools_folder=None, beagle_folder=None):
        '''
        Constructor

        Class variables
        ---------------
        vcf : str, Required
             Path to vcf file
        reference : str, Optional
             Path to fasta file containing the reference
        snptools_folder : str, Optional
                         Path to folder containing the snptools binaries (bamodel, poprob, etc.)
        beagle_folder : str, Optional
                        Path to folder containing Beagle's jar file
        '''

        if os.path.isfile(vcf) is False:
            raise Exception("File does not exist")

        self.vcf = vcf
        self.reference = reference
        self.snptools_folder = snptools_folder
        self.beagle_folder = beagle_folder

    def run_snptools_bamodel(self, sample, bamfiles, outdir=None, verbose=False):
        '''
        Method that wraps SNPTools' bamodel on a VCF containing only Biallelic SNPs
        See https://www.hgsc.bcm.edu/software/snptools

        Parameters
        ----------
        sample: str, required
              sample to analyze
        bamfiles : str, required
              file containing the BAM path/s (one per line) for sample
        outdir : str, optional
              outdir for output files
        verbose : bool, optional
              if true, then print the command line used for running SNPTools

        Returns
        -------
        Returns a *.raw file
        '''
        # parse bamfiles
        bamf = open(bamfiles, 'r')
        bams= list(set(bamf.read().splitlines()))
        # remove empty elements
        bams = list(filter(None, bams))

        program_folder = ""
        if self.snptools_folder:
            program_folder += self.snptools_folder + "/"

        outfile=""
        if outdir is not None:
            outfile="{0}/{1}".format(outdir,sample)
        else:
            outfile="{0}".format(sample)

        bam_str=" ".join(list(filter(lambda x:sample in x, bams)))

        command = "{0}/bamodel {1} {2} {3}".format(program_folder,
                                                   outfile, self.vcf,
                                                   bam_str)

        if verbose==True:
            print("Command used was: %s" % command)

        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as exc:
            print("Something went wrong while running SNPTools bamodel\n"
                  "Command used was: %s" % command)
            raise Exception(exc.output)

        if os.path.isfile(outfile+".raw") == False:
            raise Exception("Something went wrong while running SNPTools bamodel\n"
                            "{0} could not be created".format(outfile))

        return outfile+".raw"

    def run_snptools_poprob(self, outprefix, rawlist, outdir=None, verbose=False): 
        '''
        Method that wraps SNPTools' poprob on a VCF containing only Biallelic SNPs
        See https://www.hgsc.bcm.edu/software/snptools

        Parameters
        ----------
        outprefix: str, required
              prefix for *.prob file
        rawlist: str, required
              file containing the paths to the *.raw files generated by
              'run_snptools_bamodel'
        outdir : str, optional
               outdir for output files
        verbose : bool, optional
                  if true, then print the command line used for running SNPTools

        Returns
        -------
        Returns a *.prob file
        '''

        program_folder = ""
        if self.snptools_folder:
            program_folder += self.snptools_folder + "/"

        outfile=""
        if outdir is not None:
            outfile="{0}/{1}.prob".format(outdir,outprefix)
        else:
            outfile="{0}.prob".format(outprefix)

        command = "{0}/poprob {1} {2} {3}".format(program_folder,
                                                  self.vcf,
                                                  rawlist,
                                                  outfile)
        
        if verbose==True:
            print("Command used was: %s" % command)
        
        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as exc:
            print("Something went wrong while running SNPTools poprob\n"
                  "Command used was: %s" % command)
            raise Exception(exc.output)

        if os.path.isfile(outfile) == False:
            raise Exception("Something went wrong while running SNPTools poprob\n"
                            "{0} could not be created".format(outfile))

        return outfile


    def run_snptools_prob2vcf(self, probf, outprefix, chro, outdir=None, verbose=False):
        '''
        Method that wraps SNPTools' prob2vcf on a VCF containing only Biallelic SNPs
        See https://www.hgsc.bcm.edu/software/snptools

        Parameters
        ----------
        probf: str, required
              *.prob file generated by 'run_snptools_poprob'
        outprefix: str, required
              Prefix used for output file
        chro: str, required
              chromosome for which the vcf will be generated
        outdir : str, optional
               outdir for output files
        verbose : bool, optional
                  if true, then print the command line used for running SNPTools

        Returns
        -------
        Compressed VCF file with the population genotype likelihoods

        '''

        program_folder = ""
        if self.snptools_folder:
            program_folder += self.snptools_folder + "/"

        outfile=""
        if outdir is not None:
            outfile="{0}/{1}.vcf.gz".format(outdir, outprefix)
        else:
            outfile="{0}.vcf.gz".format(outprefix)

        command = "{0}/prob2vcf {1} {2} {3}".format(program_folder,
                                                    probf,
                                                    outfile,
                                                    chro)

        if verbose==True:
            print("Command used was: %s" % command)

        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as exc:
            print("Something went wrong while running SNPTools prob2vcf\n"
                  "Command used was: %s" % command)
            raise Exception(exc.output)

        if os.path.isfile(outfile) == False:
            raise Exception("Something went wrong while running SNPTools prob2vcf\n"
                            "{0} could not be created".format(outfile))

        return outfile

    def run_beagle(self, outprefix, window=None, overlap=None, niterations=None, outdir=None, verbose=False):
        '''
        Method that wraps Beagle (see https://faculty.washington.edu/browning/beagle/beagle.html)
        and will be used to call genotypes on a VCF file containing GT likelihoods

        Parameters
        ----------
        outprefix: str, required
              Prefix used for output file
        window: int, optional
                number of markers to include in each sliding
                window. Default: 50000
        overlap: int, optional
                 specifies the number of markers of overlap between sliding
                 windows. Default: 3000
        niterations: unt, optional
                     specifies the number of phasing iterations. Default:
                     niterations=5
        outdir : str, optional
                 outdir for output files
        verbose : bool, optional
                  if true, then print the command line used for running Beagle

        Returns
        -------
        Compressed VCF file with the genotype calls
        '''

        program_folder = ""
        if self.beagle_folder:
            program_folder += self.beagle_folder + "/"

        outfile=""
        if outdir is not None:
            outfile="{0}/{1}.beagle".format(outdir, outprefix)
        else:
            outfile="{0}.beagle".format(outprefix)

        command = "java -jar {0}/beagle.08Jun17.d8b.jar gl={1} out={2}".format(program_folder,
                                                                               self.vcf,
                                                                               outfile)
        if window is not None:
            command += " window={0}".format(window)

        if overlap is not None:
            command += " overlap={0}".format(overlap)

        if niterations is not None:
            command += " niterations={0}".format(niterations)

        if verbose==True:
            print("Command used was: %s" % command)

        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as exc:
            print("Something went wrong while running Beagle\n"
                  "Command used was: %s" % command)
            raise Exception(exc.output)

        return outfile+".vcf.gz"
