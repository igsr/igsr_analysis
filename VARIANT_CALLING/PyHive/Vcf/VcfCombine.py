import eHive
import subprocess
import os
import sys
import random
import string

from VcfUtils import VcfUtils

class VcfCombine(eHive.BaseRunnable):
    """Combine different VCFs generated by different callers into a single VCF"""
    
    def run(self):

        flist=self.param_required('flist')
        
        labels=[]
        vcf_paths=[]
        for t in flist:
            # Tuples contain (label,path)
            label=t[0]
            path=t[1]
            labels.append(label)
            vcf_paths.append(path)
        
        vcf_utils=VcfUtils(vcflist=vcf_paths,bcftools_folder=self.param_required('bcftools_folder'),
                           gatk_folder=self.param_required('gatk_folder'))

        outfile=vcf_utils.combine(labels=labels,reference=self.param_required('reference') ,outprefix=self.param_required('outprefix'),
                                  outdir=self.param_required('work_dir'), compress=True,genotypemergeoption='UNIQUIFY',options=['-env','-sites_only',
                                                                                                                                '--filteredAreUncalled'])

        self.param('out_vcf', outfile)

    def write_output(self):
        self.warning('Work is done!')
        self.dataflow( { 'out_vcf' : self.param('out_vcf') }, 1)




