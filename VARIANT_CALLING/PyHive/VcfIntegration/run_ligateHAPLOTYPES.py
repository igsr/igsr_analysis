import eHive
import os
from VCFIntegration.Shapeit import Shapeit

class run_ligateHAPLOTYPES(eHive.BaseRunnable):
    '''
    Run ligateHAPLOTYPES on the different chunks generated by SHAPEIT in order to produce a single output file
    '''
    
    def run(self):

        verbose=None
        if self.param_is_defined('verbose'):
            verbose=True
        else:
            verbose=False

        if not os.path.isdir(self.param_required('work_dir')):
            os.makedirs(self.param_required('work_dir'))

        outprefix=os.path.split(self.param_required('outprefix'))[1]
        outprefix="{0}/{1}".format(self.param_required('work_dir'),outprefix)

        chunk_str= " ".join(self.param_required('hapgz_list'))

        shapeit_object=Shapeit(ligateHAPLOTYPES_folder = self.param_required('ligateHAPLOTYPES_folder'))

        outdict=shapeit_object.ligate_shapeitchunks(vcf_f= self.param_required('vcf_f'),
                                                    scaffolded_samples= self.param_required('scaffolded_samples'),
                                                    chunk_str= chunk_str,
                                                    output_prefix= self.param_required('outprefix') ,
                                                    verbose=verbose)
        
        self.param('outdict', outdict)
       
    def write_output(self):
        self.warning('Work is done!')

        outdict= self.param('outdict')
        self.dataflow( {
            'hap_gz' : outdict['hap_gz'],
            'hap_sample' : outdict['hap_sample']
        }, 1)



