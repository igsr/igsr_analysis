import eHive
import os
import pdb
from VCFIntegration.Beagle import Beagle

class run_prepareGenFromBeagle4(eHive.BaseRunnable):
    '''
    Run prepareGenFromBeagle4 on a set of posteriors VCFs generated by BEAGLE across different chunks
    and produces proper whole chromosome input files for SHAPEIT
    '''
    
    def run(self):

        verbose=None
        if self.param_is_defined('verbose'):
            verbose=True
        else:
            verbose=False

        if not os.path.isdir(self.param_required('work_dir')):
            os.makedirs(self.param_required('work_dir'))

        outprefix=os.path.split(self.param_required('outprefix'))[1]
        outprefix="{0}/{1}".format(self.param_required('work_dir'),outprefix)
        
        vcf_object=Beagle(vcf=self.param_required('vcf_file'),
                          prepareGenFromBeagle4_folder=self.param_required('prepareGenFromBeagle4_folder'))

        basename=os.path.split(self.param_required('prefix_in'))[1]
        outdict=vcf_object.prepare_Gen_From_Beagle4(prefix_in=self.param_required('work_dir')+"/beagle/"+basename,
                                                    outprefix=outprefix,verbose=verbose)
        
        self.param('outdict', outdict)
       
    def write_output(self):
        self.warning('Work is done!')
        outdict= self.param('outdict')
        self.dataflow( {
            'input_gen' : "{0} {1}".format(outdict['gen_gz'], outdict['gen_sample']),
            'input_init' : "{0} {1}".format(outdict['hap_gz'],outdict['hap_sample'])}, 
            1)




